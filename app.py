import streamlit as st
import pandas as pd
from mplsoccer import VerticalPitch
import matplotlib.pyplot as plt
from io import BytesIO

# Inicializar session state
if "registro" not in st.session_state:
    st.session_state.registro = []
if "fase" not in st.session_state:
    st.session_state.fase = "inicio"
if "datos" not in st.session_state:
    st.session_state.datos = {}

st.title("üéØ Registro de Acciones de Bal√≥n Parado")

# Paso 1: tipo de bal√≥n parado
st.subheader("1. Tipo de bal√≥n parado")
tipo = st.selectbox("Selecciona una opci√≥n", ["Tiro libre", "C√≥rner", "Lateral", "Penal"])

# Paso 2: Nombre ejecutor
ejecutor = st.text_input("2. ¬øQui√©n ejecut√≥ la jugada?")

# Paso 3: Nombre del primer contacto
primer_contacto = st.text_input("3. ¬øQui√©n recibi√≥ el bal√≥n?")

# Paso 4: Nombre del segundo contacto (opcional)
segundo_contacto = st.text_input("4. ¬øSegundo contacto (opcional)?")

st.subheader("5. Haz clic en el campo para registrar:")

# Dibujar la cancha con mplsoccer
pitch = VerticalPitch(pitch_type='statsbomb', pitch_color='grass', line_color='white')
fig, ax = pitch.draw(figsize=(8, 6))
buf = BytesIO()
plt.savefig(buf, format="png")
plt.close(fig)

# Mostrar imagen y capturar clics
coords = st.image(buf.getvalue(), use_column_width=True)
st.info("Haz clic en el lugar de ejecuci√≥n y luego en el de finalizaci√≥n en la imagen (esto se implementar√° con Plotly si deseas interactividad real)")

# ‚õî Aqu√≠ deber√≠amos integrar clics interactivos (por ahora simularemos coordenadas manuales)

x_inicio = st.slider("Coordenada X - ejecuci√≥n", 0, 120)
y_inicio = st.slider("Coordenada Y - ejecuci√≥n", 0, 80)

x_fin = st.slider("Coordenada X - finalizaci√≥n", 0, 120)
y_fin = st.slider("Coordenada Y - finalizaci√≥n", 0, 80)

if st.button("Registrar acci√≥n"):
    st.session_state.registro.append({
        "tipo": tipo,
        "ejecutor": ejecutor,
        "primer_contacto": primer_contacto,
        "segundo_contacto": segundo_contacto,
        "x_inicio": x_inicio,
        "y_inicio": y_inicio,
        "x_fin": x_fin,
        "y_fin": y_fin
    })
    st.success("‚úÖ Acci√≥n registrada")

# Mostrar dataframe
df = pd.DataFrame(st.session_state.registro)
if not df.empty:
    st.subheader("üìã Registro de acciones")
    st.dataframe(df)

    # Exportar CSV
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("‚¨áÔ∏è Descargar CSV", csv, "acciones_balon_parado.csv", "text/csv")

