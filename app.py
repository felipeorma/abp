import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from mplsoccer import VerticalPitch

# Configuraci√≥n inicial
st.set_page_config(layout="centered")
st.title("‚öΩ Registro y Heatmap de Bal√≥n Parado")

# Inicializar sesi√≥n para almacenar datos
if "registro" not in st.session_state:
    st.session_state.registro = []

# Listados de jugadores y rivales
jugadores_cavalry = [
    "Marco Carducci", "Joseph Holliday", "Neven Fewster", "Callum Montgomery", "Bradley Kamdem",
    "Tom Field", "Eryk Kobza", "Michael Harms", "Fraser Aird", "Mihail Gherasimencov", "Charlie Trafford",
    "Jesse Daley", "Sergio Camargo", "Jay Herdman", "Caniggia Elva", "Ma√´l Henry", "Shamit Shome",
    "Diego Guti√©rrez", "Niko Myroniuk", "Josh Belbin", "James McGlinchey", "Ali Musse", "Tobias Warschewski",
    "Nicolas W√§hling", "Chanan Chanda", "Myer Bevan"
]

equipos_cpl = [
    "Atl√©tico Ottawa", "Forge FC", "HFX Wanderers FC", "Pacific FC", "Valour FC",
    "Vancouver FC", "York United FC"
]

# Coordenadas de zonas
zonas_coords = {
    1: (120, 0), 2: (120, 80), 3: (93, 9), 4: (93, 71),
    5: (114, 30), 6: (114, 50), 7: (114, 40), 8: (111, 15),
    9: (111, 65), 10: (105, 35), 11: (105, 45), 12: (105, 25),
    13: (105, 55), 14: (93, 29), 15: (93, 51), 16: (72, 20),
    17: (72, 60), "Penal": (108, 40)
}

# Formulario de registro
st.subheader("üìã Registrar nueva acci√≥n")

# Campos principales en columnas
col1, col2 = st.columns(2)
with col1:
    ejecutor = st.selectbox("üëü Ejecutante", jugadores_cavalry)
    match_day = st.selectbox("üóìÔ∏è Jornada", ["Rueda 1", "Rueda 2", "Rueda 3", "Rueda 4"])
    oponente = st.selectbox("üÜö Rival", equipos_cpl)

with col2:
    tipo_accion = st.selectbox("‚öôÔ∏è Tipo de acci√≥n", ["Tiro libre", "C√≥rner", "Lateral", "Penal"])
    equipo = st.selectbox("üè≥Ô∏è Equipo que ejecut√≥", ["Cavalry FC", "Rival"])
    field = st.selectbox("üìç Condici√≥n de campo", ["Local", "Visitante"])

# Tiempo de juego
periodo = st.selectbox("‚è±Ô∏è Periodo", ["1T", "2T"])
if periodo == "1T":
    minuto_opts = [str(x) for x in range(0, 46)] + ["45+"]
else:
    minuto_opts = [str(x) for x in range(45, 91)] + ["90+"]
minuto_str = st.selectbox("‚è±Ô∏è Minuto", minuto_opts)

# L√≥gica condicional para diferentes tipos de acciones
if tipo_accion == "Penal":
    zona_saque = "Penal"
    zona_remate = "Penal"
    primer_contacto = "N/A"
    cuerpo1 = "N/A"
    segundo_contacto = "N/A"
    st.info("‚ö†Ô∏è Para penales: Zonas y contactos se establecen autom√°ticamente")
    
elif tipo_accion == "C√≥rner":
    col1, col2 = st.columns(2)
    with col1:
        zona_saque = st.selectbox("üìç Zona de saque (c√≥rner)", [1, 2])
    with col2:
        zona_remate = st.selectbox("üéØ Zona de remate", [z for z in zonas_coords if z != "Penal"])
    primer_contacto = st.selectbox("ü§ù Primer contacto (jugador)", jugadores_cavalry + ["Rival"])
    cuerpo1 = st.selectbox("ü¶µ Parte del cuerpo (1er contacto)", ["Cabeza", "Pie derecho", "Pie izquierdo", "Tronco", "Otro"])
    segundo_contacto = st.text_input("üìå Segundo contacto (opcional)")
    
else:
    col1, col2 = st.columns(2)
    with col1:
        zona_saque = st.selectbox("üìç Zona de saque", [z for z in zonas_coords if z != "Penal"])
    with col2:
        zona_remate = st.selectbox("üéØ Zona de remate", [z for z in zonas_coords if z != "Penal"])
    primer_contacto = st.selectbox("ü§ù Primer contacto (jugador)", jugadores_cavalry + ["Rival"])
    cuerpo1 = st.selectbox("ü¶µ Parte del cuerpo (1er contacto)", ["Cabeza", "Pie derecho", "Pie izquierdo", "Tronco", "Otro"])
    segundo_contacto = st.text_input("üìå Segundo contacto (opcional)")

# Campos restantes
gol = st.selectbox("ü•Ö ¬øTermin√≥ en gol?", ["No", "S√≠"])
resultado = st.selectbox("üéØ Resultado final de la jugada", ["Despeje", "Posesi√≥n rival", "Disparo desviado", "Disparo al arco", "Gol"])
perfil = st.selectbox("ü¶∂ Perfil del ejecutante", ["H√°bil", "No h√°bil"])
estrategia = st.selectbox("üìà ¬øFue jugada estrat√©gica?", ["S√≠", "No"])
tipo_pase = st.selectbox("üì® Tipo de ejecuci√≥n", ["Centro", "Pase corto", "Disparo directo"])

# Conversi√≥n de minutos
if "45+" in minuto_str:
    minuto = 46
elif "90+" in minuto_str:
    minuto = 91
else:
    minuto = int(minuto_str)

# Bot√≥n de registro
if st.button("‚úÖ Agregar acci√≥n"):
    registro_data = {
        "MatchDay": match_day,
        "Opponent": oponente,
        "Field": field,
        "Action Type": tipo_accion,
        "Team": equipo,
        "minuto": minuto,
        "Period": periodo,
        "zona_saque": zona_saque,
        "zona_remate": zona_remate,
        "Player Taker": ejecutor,
        "Goal": gol,
        "Player 1st Contact": primer_contacto,
        "Body Part 1st Contact": cuerpo1,
        "2nd Contact": segundo_contacto,
        "Play Outcome": resultado,
        "Taker Profile": perfil,
        "Strategic": estrategia,
        "Direct / Short Pass": tipo_pase
    }
    
    st.session_state.registro.append(registro_data)
    st.success("Acci√≥n registrada correctamente ‚úÖ")

# Visualizaci√≥n de datos
df = pd.DataFrame(st.session_state.registro)
if not df.empty:
    st.subheader("üìä Acciones registradas")
    
    # Eliminaci√≥n de registros
    index_to_delete = st.number_input("üóëÔ∏è Eliminar registro por √≠ndice", min_value=0, max_value=len(df)-1, step=1)
    if st.button("Eliminar registro"):
        st.session_state.registro.pop(index_to_delete)
        st.experimental_rerun()
    
    st.dataframe(df)

    # Procesamiento para heatmaps
    df["coords_saque"] = df["zona_saque"].map(zonas_coords)
    df["coords_remate"] = df["zona_remate"].map(zonas_coords)
    df = df.dropna(subset=["coords_saque", "coords_remate"])
    df[["x_saque", "y_saque"]] = pd.DataFrame(df["coords_saque"].tolist(), index=df.index)
    df[["x_remate", "y_remate"]] = pd.DataFrame(df["coords_remate"].tolist(), index=df.index)

    # Funci√≥n de graficaci√≥n corregida
    def graficar_heatmap(title, x, y, color):
        pitch = VerticalPitch(pitch_type='statsbomb', pitch_color='grass', line_color='white')
        fig, ax = pitch.draw(figsize=(6, 9))
        
        try:
            # Convertir a num√©rico y filtrar NaNs
            x = pd.to_numeric(x, errors='coerce')
            y = pd.to_numeric(y, errors='coerce')
            valid = x.notna() & y.notna()
            x_valid = x[valid]
            y_valid = y[valid]
            
            if not x_valid.empty:
                # Scatter plot siempre visible
                pitch.scatter(x_valid, y_valid, ax=ax, 
                            s=150, color=color, 
                            edgecolors='black', zorder=3)
                
                # KDE solo si hay suficientes puntos
                if len(x_valid) > 1:
                    pitch.kdeplot(x_valid, y_valid, ax=ax, 
                                cmap=f"{color.capitalize()}s",  # Correcci√≥n clave aqu√≠
                                levels=50, fill=True, alpha=0.5)
                    
        except Exception as e:
            st.error(f"Error al generar el gr√°fico: {str(e)}")
        
        st.subheader(title)
        st.pyplot(fig)

    # Generaci√≥n de heatmaps
    graficar_heatmap("üü¢ Zona de Saque", df["x_saque"], df["y_saque"], "green")
    graficar_heatmap("üî¥ Zona de Remate", df["x_remate"], df["y_remate"], "red")

    # Descarga de datos
    csv = df.drop(columns=["coords_saque", "coords_remate", "x_saque", "y_saque", "x_remate", "y_remate"]).to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Descargar CSV", csv, "acciones_balon_parado.csv", "text/csv")
else:
    st.info("üì≠ No hay acciones registradas todav√≠a. Usa el formulario para comenzar.")